package permcombpack

/**
  * Created by JanVerheul on 3/8/2018.
  *
  * The class represents a generator of permutations with repetition from a given set <domain> and a given size <genSize>
  *
  * The permutations are generated by an imperative algorithm, and provided by a stream (an iterator from which successive values can be pulled).
  *
  */
class RepeatingPermPull[T](domain: List[T], genSize: Int)  extends Iterable[List[T]] {
    val mod = domain.length
    var hasNextVar = (mod > 0 || genSize == 0)
    val status = Array.fill(genSize)(0)

    def progress() = {
        var carry = true
        var index = 0
        while (carry && index < genSize) {
            status(index) += 1
            carry = false
            if (status(index) >= mod) {
                status(index) = 0
                carry = true
                index += 1
            }
        }
        hasNextVar = index < genSize
    }

    def iterator = new Iterator[List[T]] {
        def hasNext(): Boolean = hasNextVar
        def next(): List[T] = {
            val result = status.map(domain(_)).toList
            progress()
            result
        }
    }
}